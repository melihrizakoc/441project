#deneme1

import requests
import datetime
from datetime import timedelta
import random  # For simulating price estimations where real API isn't available
import heapq  # For Dijkstra's algorithm
import math   # For distance calculations
import copy   # For deep copying objects

# ---------------------- FOURSQUARE ---------------------- #
def get_foursquare_places(city, limit=5):
    url = "https://api.foursquare.com/v3/places/search"
    headers = {
        "accept": "application/json",
        "Authorization": "fsq3s5hEBcp08bAusKqLz+wyaMnksJ78tmvPMidEfAe+Ktw="
    }
    params = {
        "near": city,
        "limit": limit,
        "sort": "POPULARITY"
    }

    response = requests.get(url, headers=headers, params=params)
    data = response.json()
    print(f"üîπ {city} i√ßin pop√ºler yerler:")
    for place in data.get("results", []):
        print("-", place["name"])
    print()

def get_foursquare_places_return(city, limit=5):
    """Returns a list of popular places in the city"""
    url = "https://api.foursquare.com/v3/places/search"
    headers = {
        "accept": "application/json",
        "Authorization": "fsq3s5hEBcp08bAusKqLz+wyaMnksJ78tmvPMidEfAe+Ktw="
    }
    params = {
        "near": city,
        "limit": limit,
        "sort": "POPULARITY"
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        places = []
        for place in data.get("results", []):
            places.append(place["name"])
        return places
    except Exception as e:
        print(f"Foursquare API hatasƒ±: {str(e)}")
        return []


# ---------------------- OPEN-METEO ---------------------- #
def get_weather(city_lat, city_lon):
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": city_lat,
        "longitude": city_lon,
        "daily": "temperature_2m_max,temperature_2m_min,precipitation_sum",
        "timezone": "auto"
    }

    response = requests.get(url, params=params)
    data = response.json()
    print("üå§Ô∏è Hava durumu tahmini (bug√ºnden itibaren):")
    for i in range(3):
        date = data['daily']['time'][i]
        t_min = data['daily']['temperature_2m_min'][i]
        t_max = data['daily']['temperature_2m_max'][i]
        rain = data['daily']['precipitation_sum'][i]
        print(f"{date}: {t_min}¬∞C - {t_max}¬∞C, Yaƒüƒ±≈ü: {rain}mm")
    print()


# ---------------------- AMADEUS OTEL ---------------------- #
def get_amadeus_access_token(client_id, client_secret):
    url = "https://test.api.amadeus.com/v1/security/oauth2/token"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = {
        "grant_type": "client_credentials",
        "client_id": client_id,
        "client_secret": client_secret
    }

    response = requests.post(url, headers=headers, data=data)
    return response.json()["access_token"]


def get_hotels(city_code, access_token):
    url = "https://test.api.amadeus.com/v1/shopping/hotel-offers"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    params = {
        "cityCode": city_code,
        "adults": 1,
        "roomQuantity": 1,
        "radius": 20,
        "radiusUnit": "KM",
        "paymentPolicy": "NONE",
        "includeClosed": False,
        "bestRateOnly": True,
        "view": "FULL",
        "sort": "PRICE"
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        
        print("üè® Uygun otel teklifleri:")
        
        # API yanƒ±t yapƒ±sƒ±nƒ± kontrol edelim
        if "data" in data and len(data.get("data", [])) > 0:
            for offer in data.get("data", [])[:3]:
                try:
                    name = offer["hotel"]["name"]
                    price = offer["offers"][0]["price"]["total"]
                    currency = offer["offers"][0]["price"]["currency"]
                    print(f"- {name}: {price} {currency}")
                except KeyError as e:
                    print(f"- Otel bilgilerinde eksik alan: {str(e)}")
            print()
        else:
            if "errors" in data:
                print(f"Hata: {data['errors'][0]['title']} - {data['errors'][0]['detail']}")
            else:
                print(f"Bu ≈üehir i√ßin uygun otel teklifi bulunamadƒ±.")
            print()
    except Exception as e:
        print(f"Otel arama hatasƒ±: {str(e)}")
        print()


# ---------------------- AMADEUS ≈ûEHIR ARAMA ---------------------- #
def search_city(city_name, access_token):
    """Amadeus API √ºzerinden ≈üehir arama"""
    url = "https://test.api.amadeus.com/v1/reference-data/locations"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    params = {
        "keyword": city_name,
        "subType": "CITY",
        "page[limit]": 5
    }
    
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        
        if "data" in data and len(data["data"]) > 0:
            city_options = []
            print(f"\n≈ûehir aramasƒ± sonu√ßlarƒ± '{city_name}':")
            
            for i, location in enumerate(data["data"]):
                city_info = {
                    "name": location["name"],
                    "city_code": location["iataCode"],
                    "lat": float(location["geoCode"]["latitude"]),
                    "lon": float(location["geoCode"]["longitude"])
                }
                city_options.append(city_info)
                print(f"{i+1}. {location['name']} ({location['iataCode']})")
            
            return city_options
        else:
            print(f"'{city_name}' i√ßin ≈üehir bilgisi bulunamadƒ±.")
            return None
    except Exception as e:
        print(f"≈ûehir arama hatasƒ±: {str(e)}")
        return None


# ---------------------- BUDGET CALCULATION ---------------------- #
def estimate_flight_cost(from_city, to_city):
    """U√ßu≈ü maliyeti tahmini yapar"""
    # Ger√ßek API olmadƒ±ƒüƒ± i√ßin sim√ºle ediyoruz
    base_cost = random.randint(80, 300)
    distance_factor = hash(from_city + to_city) % 20  # Sim√ºle mesafe fakt√∂r√º
    return base_cost + distance_factor * 5

def estimate_food_cost(city_code):
    """≈ûehirdeki ortalama g√ºnl√ºk yemek maliyetini tahmin eder"""
    # ≈ûehir koduna g√∂re basit bir tahmin
    city_cost_factors = {
        'IST': 30, 'LON': 60, 'PAR': 55, 'ROM': 45, 'NYC': 70, 
        'BCN': 40, 'BER': 45, 'AMS': 50, 'VIE': 48, 'PRG': 35
    }
    return city_cost_factors.get(city_code, 40)  # Bilinmeyen ≈üehirler i√ßin 40‚Ç¨ varsayalƒ±m

def estimate_activity_cost(city_code):
    """≈ûehirdeki g√ºnl√ºk aktivite masraflarƒ± tahmini"""
    # ≈ûehir koduna g√∂re basit bir tahmin
    city_activity_factors = {
        'IST': 20, 'LON': 50, 'PAR': 45, 'ROM': 35, 'NYC': 60, 
        'BCN': 30, 'BER': 35, 'AMS': 40, 'VIE': 38, 'PRG': 25
    }
    return city_activity_factors.get(city_code, 30)  # Bilinmeyen ≈üehirler i√ßin 30‚Ç¨ varsayalƒ±m

def get_hotel_average_price(city_code, access_token):
    """≈ûehirdeki ortalama otel fiyatƒ±nƒ± alƒ±r"""
    url = "https://test.api.amadeus.com/v1/shopping/hotel-offers"
    headers = {
        "Authorization": f"Bearer {access_token}"
    }
    params = {
        "cityCode": city_code,
        "adults": 1,
        "roomQuantity": 1,
        "bestRateOnly": True
    }

    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        
        if "data" in data and len(data.get("data", [])) > 0:
            prices = []
            for offer in data.get("data", []):
                try:
                    # Access price correctly according to Amadeus structure
                    # Price is in offers[0].price.total
                    price = float(offer["offers"][0]["price"]["total"])
                    prices.append(price)
                except (KeyError, ValueError):
                    pass
            
            if prices:
                return sum(prices) / len(prices)
        
        # API yanƒ±t vermezse veya veri yoksa tahmin deƒüeri
        return estimate_hotel_cost(city_code)
    except Exception:
        return estimate_hotel_cost(city_code)

def estimate_hotel_cost(city_code):
    """Otel maliyeti tahmini yapar"""
    # ≈ûehir koduna g√∂re basit bir tahmin
    city_hotel_factors = {
        'IST': 80, 'LON': 150, 'PAR': 140, 'ROM': 110, 'NYC': 200, 
        'BCN': 100, 'BER': 110, 'AMS': 120, 'VIE': 115, 'PRG': 90
    }
    return city_hotel_factors.get(city_code, 100)  # Bilinmeyen ≈üehirler i√ßin 100‚Ç¨ varsayalƒ±m

def calculate_trip_cost(itinerary, start_city, days_per_city, access_token):
    """Toplam seyahat maliyetini hesaplar"""
    total_cost = 0
    current_city = start_city
    trip_details = []
    
    # Her ≈üehir i√ßin maliyet hesapla
    for city_info in itinerary:
        city_code = city_info["city_code"]
        city_name = city_info["name"]
        days = days_per_city[city_code]
        
        # U√ßu≈ü maliyeti
        flight_cost = estimate_flight_cost(current_city, city_code)
        
        # Konaklama maliyeti
        hotel_cost = get_hotel_average_price(city_code, access_token) * days
        
        # Yemek maliyeti
        food_cost = estimate_food_cost(city_code) * days
        
        # Aktivite maliyeti
        activity_cost = estimate_activity_cost(city_code) * days
        
        # ≈ûehir i√ßin toplam maliyet
        city_total = flight_cost + hotel_cost + food_cost + activity_cost
        
        trip_details.append({
            "city": city_name,
            "code": city_code,
            "days": days,
            "flight_cost": flight_cost,
            "hotel_cost": hotel_cost,
            "food_cost": food_cost,
            "activity_cost": activity_cost,
            "city_total": city_total
        })
        
        total_cost += city_total
        current_city = city_code
    
    return total_cost, trip_details

def optimize_trip_duration(cities, min_days, max_days, budget, start_city, access_token):
    """B√ºt√ßeye uygun en iyi tatil s√ºresini optimize eder"""
    best_plans = []
    
    # Her ≈üehir i√ßin minimum 1 g√ºn ayƒ±ralƒ±m
    base_days = {city["city_code"]: 1 for city in cities}
    total_base_days = len(cities)
    
    # Kalan g√ºnleri daƒüƒ±tmak i√ßin kombinasyonlarƒ± deneyelim
    remaining_days = min(max_days, budget // 100) - total_base_days  # G√ºnl√ºk min 100‚Ç¨ varsayƒ±mƒ±
    
    if remaining_days <= 0:
        # Minimum g√ºn sayƒ±sƒ± ile plan olu≈ütur
        cost, details = calculate_trip_cost(cities, start_city, base_days, access_token)
        if cost <= budget:
            best_plans.append({"total_cost": cost, "details": details, "days": sum(base_days.values())})
    else:
        # Farklƒ± g√ºn daƒüƒ±lƒ±mlarƒ± deneyelim
        for _ in range(10):  # En iyi 10 farklƒ± kombinasyonu deneyelim
            days_per_city = base_days.copy()
            
            # Rastgele g√ºn daƒüƒ±lƒ±mƒ± yapalƒ±m
            extra_days = remaining_days
            while extra_days > 0:
                city = random.choice(cities)["city_code"]
                days_per_city[city] += 1
                extra_days -= 1
            
            # Toplam maliyeti hesaplayalƒ±m
            cost, details = calculate_trip_cost(cities, start_city, days_per_city, access_token)
            
            # B√ºt√ßeye uygun planlarƒ± kaydedelim
            if cost <= budget:
                best_plans.append({
                    "total_cost": cost, 
                    "details": details, 
                    "days": sum(days_per_city.values())
                })
    
    # En uygun planlarƒ± b√ºt√ße kullanƒ±mƒ± maksimum olacak ≈üekilde sƒ±ralayalƒ±m
    best_plans.sort(key=lambda x: (x["days"], -x["total_cost"]))
    return best_plans

# ---------------------- A* / DIJKSTRA ALGORITHM ---------------------- #
def calculate_distance(city1, city2):
    """Calculate the approximate distance between two cities using coordinates"""
    # Haversine formula for distance calculation
    R = 6371  # Earth's radius in km
    lat1, lon1 = math.radians(city1["lat"]), math.radians(city1["lon"])
    lat2, lon2 = math.radians(city2["lat"]), math.radians(city2["lon"])
    
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    
    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    distance = R * c
    
    return distance

def find_optimal_route(start_city, cities):
    """Find the optimal route between cities using Dijkstra's algorithm"""
    # Create a graph representation of cities
    all_cities = [start_city] + cities
    n = len(all_cities)
    
    # Create distance matrix
    distances = []
    for i in range(n):
        row = []
        for j in range(n):
            if i == j:
                row.append(0)
            else:
                # Calculate distance between cities
                dist = calculate_distance(all_cities[i], all_cities[j])
                # Convert to travel cost (simplified: ‚Ç¨1 per 10km)
                cost = dist * 0.1
                row.append(cost)
        distances.append(row)
    
    # Implement TSP using a greedy approach
    current = 0  # Start from the first city
    route = [current]
    unvisited = set(range(1, n))
    total_cost = 0
    
    while unvisited:
        next_city = min(unvisited, key=lambda x: distances[current][x])
        total_cost += distances[current][next_city]
        current = next_city
        route.append(current)
        unvisited.remove(current)
    
    # Return to start city to complete the circuit if needed
    # route.append(0)
    # total_cost += distances[current][0]
    
    # Map indices back to city objects
    optimal_route = [all_cities[i] for i in route]
    
    return optimal_route, total_cost

# ---------------------- CONSTRAINT SATISFACTION PROBLEM ---------------------- #
def csp_travel_planner(cities, budget, min_days, max_days, access_token):
    """
    Implement CSP for travel planning
    
    Parameters:
    - cities: List of city objects
    - budget: Total budget in euros
    - min_days: Minimum trip duration
    - max_days: Maximum trip duration
    """
    valid_plans = []
    
    # Define constraints
    def check_constraints(days_allocation, total_cost):
        # Constraint 1: Total days must be within the allowed range
        total_days = sum(days_allocation.values())
        if total_days < min_days or total_days > max_days:
            return False
        
        # Constraint 2: Total cost must be within budget
        if total_cost > budget:
            return False
            
        # Constraint 3: Each city must have at least 1 day
        for days in days_allocation.values():
            if days < 1:
                return False
                
        return True
    
    # Generate day allocations
    def backtrack(city_index, days_allocation, remaining_days, current_cities):
        # Base case: all cities have been allocated days
        if city_index == len(cities):
            # Calculate the cost of this allocation
            cost, details = calculate_trip_cost(current_cities, "START", days_allocation, access_token)
            
            # Check if this allocation meets all constraints
            if check_constraints(days_allocation, cost):
                valid_plans.append({
                    "days_allocation": days_allocation.copy(),
                    "total_cost": cost,
                    "details": details,
                    "days": sum(days_allocation.values())
                })
            return
            
        city = cities[city_index]
        city_code = city["city_code"]
        
        # Try allocating different number of days to the current city
        for days in range(1, min(remaining_days + 1, 5)):  # Max 4 days per city
            days_allocation[city_code] = days
            current_cities.append(city)
            backtrack(city_index + 1, days_allocation, remaining_days - days, current_cities)
            current_cities.pop()
            
    # Start the backtracking search
    backtrack(0, {city["city_code"]: 0 for city in cities}, max_days, [])
    
    # Sort valid plans by maximizing days and minimizing cost difference from budget
    valid_plans.sort(key=lambda x: (x["days"], -abs(budget - x["total_cost"])), reverse=True)
    
    return valid_plans

# ---------------------- GENETIC ALGORITHM ---------------------- #
def genetic_algorithm_travel_planner(cities, budget, min_days, max_days, access_token, population_size=30, generations=15):
    """
    Optimize travel plans using a genetic algorithm
    
    Parameters:
    - cities: List of city objects
    - budget: Total budget in euros
    - min_days: Minimum trip duration
    - max_days: Maximum trip duration
    """
    def create_individual():
        """Create a random travel plan"""
        # Randomly shuffle cities order
        shuffled_cities = cities.copy()
        random.shuffle(shuffled_cities)
        
        # More strategic day allocation to improve valid solution probability
        days_allocation = {}
        remaining_days = random.randint(min_days, max_days)
        
        # First ensure minimum 1 day per city
        for city in shuffled_cities:
            city_code = city["city_code"]
            days_allocation[city_code] = 1
            remaining_days -= 1
        
        # Then distribute remaining days more evenly
        while remaining_days > 0:
            city_code = random.choice([city["city_code"] for city in shuffled_cities])
            if days_allocation[city_code] < 4:  # Max 4 days per city
                days_allocation[city_code] += 1
                remaining_days -= 1
        
        return {
            "cities": shuffled_cities,
            "days": days_allocation
        }
    
    def calculate_fitness(individual):
        """Calculate the fitness of a travel plan"""
        cost, details = calculate_trip_cost(
            individual["cities"], 
            "START", 
            individual["days"], 
            access_token
        )
        
        # Fitness criteria:
        # 1. Must be within budget (plans over budget get low fitness)
        # 2. Should maximize days
        # 3. Should use as much of the budget as possible
        
        total_days = sum(individual["days"].values())
        
        if cost > budget:
            # Penalize for exceeding budget
            return 1 / (1 + (cost - budget))
        
        # For plans within budget, reward for:
        # - More days (weighted heavily)
        # - Using more of the available budget
        fitness = (total_days / max_days) * 0.7 + (cost / budget) * 0.3
        
        return fitness
    
    def crossover(parent1, parent2):
        """Create a new travel plan by combining aspects of two parents"""
        # Child inherits city order from parent1
        child_cities = parent1["cities"].copy()
        
        # Days allocation is a mix of both parents
        child_days = {}
        for city in child_cities:
            city_code = city["city_code"]
            # 50% chance to inherit from each parent
            if random.random() < 0.5:
                child_days[city_code] = parent1["days"][city_code]
            else:
                child_days[city_code] = parent2["days"][city_code]
        
        return {
            "cities": child_cities,
            "days": child_days
        }
    
    def mutate(individual):
        """Randomly modify a travel plan"""
        # 30% chance to shuffle city order
        if random.random() < 0.3:
            random.shuffle(individual["cities"])
        
        # 50% chance to modify days allocation
        if random.random() < 0.5:
            city_code = random.choice(list(individual["days"].keys()))
            
            # Add or subtract a day
            if random.random() < 0.5 and individual["days"][city_code] > 1:
                individual["days"][city_code] -= 1
            elif sum(individual["days"].values()) < max_days:
                individual["days"][city_code] += 1
        
        return individual
    
    # Create initial population
    population = [create_individual() for _ in range(population_size)]
    
    # Evolution over generations
    best_solution = None
    best_fitness = 0
    
    for generation in range(generations):
        # Calculate fitness for each individual
        fitness_scores = []
        for ind in population:
            cost, details = calculate_trip_cost(
                ind["cities"], 
                "START", 
                ind["days"], 
                access_token
            )
            
            # Store the cost with the individual for later use
            ind["cost"] = cost
            ind["details"] = details
            
            # Calculate fitness
            total_days = sum(ind["days"].values())
            
            if cost <= budget and min_days <= total_days <= max_days:
                # Valid solution gets higher fitness
                fitness = 0.7 * (total_days / max_days) + 0.3 * (cost / budget)
                
                # Keep track of best solution
                if fitness > best_fitness:
                    best_fitness = fitness
                    best_solution = copy.deepcopy(ind)
            else:
                # Invalid solutions get lower fitness but still possible to be selected
                if cost > budget:
                    # Penalize for exceeding budget
                    fitness = 0.1 / (1 + (cost - budget) / 100)
                else:
                    # Penalize for day constraints
                    fitness = 0.1 / (1 + abs(total_days - min_days))
            
            fitness_scores.append(fitness)
        
        # Tournament selection
        new_population = []
        for _ in range(population_size):
            tournament_size = 3
            tournament = random.sample(range(population_size), tournament_size)
            winner = max(tournament, key=lambda i: fitness_scores[i])
            new_population.append(copy.deepcopy(population[winner]))
        
        # Apply crossover and mutation
        for i in range(0, population_size, 2):
            if i+1 < population_size and random.random() < 0.7:  # 70% crossover rate
                child1 = crossover(new_population[i], new_population[i+1])
                child2 = crossover(new_population[i+1], new_population[i])
                new_population[i] = child1
                new_population[i+1] = child2
                
        for i in range(population_size):
            if random.random() < 0.3:  # 30% mutation rate
                new_population[i] = mutate(new_population[i])
        
        population = new_population
    
    # If no valid solution found after all generations, create a basic valid solution
    if best_solution is None:
        print("Genetik algoritma uygun plan bulamadƒ±, temel bir plan olu≈üturuluyor...")
        days_per_city = max_days // len(cities)
        remaining_days = max_days - days_per_city * len(cities)
        
        basic_solution = {
            "cities": cities.copy(),
            "days": {city["city_code"]: days_per_city for city in cities}
        }
        
        # Distribute remaining days
        for i in range(remaining_days):
            basic_solution["days"][cities[i % len(cities)]["city_code"]] += 1
        
        cost, details = calculate_trip_cost(
            basic_solution["cities"], 
            "START", 
            basic_solution["days"], 
            access_token
        )
        
        if cost <= budget:
            best_solution = basic_solution
            best_solution["cost"] = cost
            best_solution["details"] = details
    
    # Return the best solutions
    final_plans = []
    if best_solution:
        final_plans.append({
            "total_cost": best_solution["cost"], 
            "details": best_solution["details"], 
            "days": sum(best_solution["days"].values()),
            "cities_order": best_solution["cities"]
        })
        
    # Also add some diverse backup plans if available
    diverse_plans = []
    for ind in population:
        if "cost" in ind and ind["cost"] <= budget and min_days <= sum(ind["days"].values()) <= max_days:
            plan = {
                "total_cost": ind["cost"], 
                "details": ind["details"],
                "days": sum(ind["days"].values()),
                "cities_order": ind["cities"]
            }
            diverse_plans.append(plan)
    
    # Add diverse plans to final plans
    diverse_plans.sort(key=lambda x: (x["days"], -abs(budget - x["total_cost"])), reverse=True)
    final_plans.extend(diverse_plans[:4])  # Add up to 4 more diverse plans
        
    return final_plans[:5]  # Return top 5 plans

# ---------------------- ANA FONKSƒ∞YON ---------------------- #
def tatil_planla(city, lat, lon, city_code):
    print(f"=== {city} i√ßin Tatil Planƒ± ===\n")

    get_foursquare_places(city)
    get_weather(lat, lon)

    # Otel aramasƒ± i√ßin yeni bir token alalƒ±m
    client_id = "YhrTcYlqUCh5vG7AnRQATxxNaZMAZZPH"
    client_secret = "XWAbTdoc4a2aGyeQ"
    token = get_amadeus_access_token(client_id, client_secret)
    print(f"Oteller {city_code} kodu ile aranƒ±yor...")
    get_hotels(city_code, token)


def main():
    print("=== Tatil Planlayƒ±cƒ± ===")
    print("ƒ∞stediƒüiniz ≈üehirler i√ßin tatil planƒ± yapabilirsiniz.")
    
    # Amadeus token'ƒ±nƒ± ba≈ülangƒ±√ßta alƒ±yoruz
    client_id = "YhrTcYlqUCh5vG7AnRQATxxNaZMAZZPH"
    client_secret = "XWAbTdoc4a2aGyeQ"
    access_token = get_amadeus_access_token(client_id, client_secret)
    
    # Initialize city recommendations dictionary
    city_recommendations = {}
    
    while True:
        print("\n1. Geli≈ümi≈ü Tatil Planlama (Optimizasyonlu)")
        print("q. √áƒ±kƒ±≈ü")
        secim = input("Se√ßiminiz: ")
        
        if secim == 'q':
            print("Programdan √ßƒ±kƒ±lƒ±yor...")
            break
        
        if secim == '1':
            print("\n=== Geli≈ümi≈ü Tatil Planlama ===")
            print("Optimum rotayƒ±, b√ºt√ße ve s√ºre planlamasƒ±nƒ± birlikte yapacaƒüƒ±z.")
            
            # Bulunduƒüunuz ≈üehir
            start_city_name = input("\nBulunduƒüunuz ≈üehir: ")
            start_city_options = search_city(start_city_name, access_token)
            if not start_city_options:
                print("Ba≈ülangƒ±√ß ≈üehri bulunamadƒ±.")
                continue
                
            start_city_idx = int(input("L√ºtfen bir ≈üehir se√ßin (numara): ")) - 1
            start_city = start_city_options[start_city_idx]
            
            # B√ºt√ße bilgisini alalƒ±m
            try:
                budget = float(input("Toplam b√ºt√ßeniz (‚Ç¨): "))
                if budget <= 0:
                    print("B√ºt√ße pozitif bir deƒüer olmalƒ±dƒ±r.")
                    continue
            except ValueError:
                print("L√ºtfen ge√ßerli bir b√ºt√ße deƒüeri girin.")
                continue
            
            # Tatil g√ºn aralƒ±ƒüƒ±nƒ± alalƒ±m
            try:
                min_days = int(input("Minimum tatil s√ºresi (g√ºn): "))
                max_days = int(input("Maksimum tatil s√ºresi (g√ºn): "))
                if min_days <= 0 or max_days <= 0 or min_days > max_days:
                    print("Ge√ßersiz g√ºn aralƒ±ƒüƒ±. Minimum g√ºn sayƒ±sƒ± pozitif ve maksimum g√ºnden k√º√ß√ºk olmalƒ±dƒ±r.")
                    continue
            except ValueError:
                print("L√ºtfen ge√ßerli bir g√ºn sayƒ±sƒ± girin.")
                continue
                
            # Gidilecek ≈üehirler
            destinations = []
            city_count = int(input("\nKa√ß ≈üehir gezmek istiyorsunuz? (2-5): "))
            if city_count < 2 or city_count > 5:
                print("2 ile 5 arasƒ±nda bir deƒüer girin.")
                continue
                
            for i in range(city_count):
                dest_name = input(f"\n{i+1}. ≈üehir: ")
                dest_options = search_city(dest_name, access_token)
                
                if not dest_options:
                    print(f"≈ûehir bulunamadƒ±: {dest_name}")
                    continue
                
                dest_idx = int(input("L√ºtfen bir ≈üehir se√ßin (numara): ")) - 1
                destinations.append(dest_options[dest_idx])
                
                # Get recommendations for each city
                city_code = dest_options[dest_idx]["city_code"]
                city_name = dest_options[dest_idx]["name"]
                print(f"≈ûehir i√ßin √∂neriler alƒ±nƒ±yor: {city_name}...")
                city_recommendations[city_code] = get_foursquare_places_return(city_name)
            
            print("\nKapsamlƒ± tatil planƒ±nƒ±z hesaplanƒ±yor...")
            print("Bu i≈ülem biraz zaman alabilir...")
            
            # 1. En kƒ±sa yol algoritmasƒ± (Dijkstra) - optimum rota belirlemek i√ßin
            print("\n1/4: Optimum rota hesaplanƒ±yor...")
            optimal_route, route_cost = find_optimal_route(start_city, destinations)
            
            print("\n=== Optimum Seyahat Rotasƒ± ===")
            print(f"Ba≈ülangƒ±√ß: {start_city['name']} ({start_city['city_code']})")
            
            for i, city in enumerate(optimal_route[1:]):
                print(f"{i+1}. {city['name']} ({city['city_code']})")
                
            print(f"Tahmini rota maliyeti: {route_cost:.2f}‚Ç¨")
            
            # 2. √áoklu ≈üehir optimizasyonu - g√ºn daƒüƒ±lƒ±mƒ± i√ßin
            print("\n2/4: B√ºt√ßeye uygun s√ºre daƒüƒ±lƒ±mƒ± hesaplanƒ±yor...")
            optimized_plans = optimize_trip_duration(
                destinations, 
                min_days, 
                max_days, 
                budget, 
                start_city['city_code'],
                access_token
            )
            
            # 3. Kƒ±sƒ±t tabanlƒ± seyahat planlama (CSP) - kƒ±sƒ±tlarƒ± saƒülayan alternatif planlar i√ßin
            print("\n3/4: Kƒ±sƒ±t tabanlƒ± alternatif planlar hesaplanƒ±yor...")
            csp_plans = csp_travel_planner(
                destinations, 
                budget, 
                min_days, 
                max_days, 
                access_token
            )
            
            # 4. Genetik algoritma - en optimum planƒ± bulmak i√ßin
            print("\n4/4: Genetik algoritma ile plan optimizasyonu yapƒ±lƒ±yor...")
            ga_plans = genetic_algorithm_travel_planner(
                destinations, 
                budget, 
                min_days, 
                max_days, 
                access_token
            )
            
            # T√ºm sonu√ßlarƒ± birle≈ütirip kar≈üƒ±la≈ütƒ±rma yapalƒ±m
            print("\n=== KAPSAMLI TATƒ∞L PLAN ANALƒ∞Zƒ∞ ===")
            
            # Dijkstra ile belirlenen optimum rota
            print("\nüó∫Ô∏è OPTIMUM ROTA:")
            print(f"Ba≈ülangƒ±√ß: {start_city['name']} ({start_city['city_code']})")
            for i, city in enumerate(optimal_route[1:]):
                print(f"{i+1}. {city['name']} ({city['city_code']})")
            
            # En iyi planlar
            print("\nüí∞ B√úT√áE DOSTU PLAN:")
            if optimized_plans:
                best_budget_plan = min(optimized_plans, key=lambda x: x['total_cost'])
                print(f"Toplam: {best_budget_plan['total_cost']:.2f}‚Ç¨, S√ºre: {best_budget_plan['days']} g√ºn")
                for city in best_budget_plan['details']:
                    print(f"  ‚Ä¢ {city['city']} ({city['code']}): {city['days']} g√ºn, {city['city_total']:.2f}‚Ç¨")
            else:
                print("B√ºt√ßeye uygun plan bulunamadƒ±")
                
            print("\n‚è±Ô∏è MAKSIMUM DENEYIM PLANI:")
            if ga_plans:
                best_exp_plan = max(ga_plans, key=lambda x: x['days'])
                print(f"Toplam: {best_exp_plan['total_cost']:.2f}‚Ç¨, S√ºre: {best_exp_plan['days']} g√ºn")
                cities_order = [city["name"] for city in best_exp_plan["cities_order"]]
                print(f"  √ñnerilen Rota: {' -> '.join(cities_order)}")
                for city in best_exp_plan['details']:
                    print(f"  ‚Ä¢ {city['city']} ({city['code']}): {city['days']} g√ºn")
                    print(f"    Konaklama: {city['hotel_cost']:.2f}‚Ç¨, U√ßu≈ü: {city['flight_cost']:.2f}‚Ç¨")
            else:
                print("Genetik algoritmada uygun plan bulunamadƒ±")
                
            print("\nüèÜ EN DEƒûERLI ZAMAN PLANI:")
            all_plans = []
            if optimized_plans:
                all_plans.extend(optimized_plans)
            if csp_plans:
                all_plans.extend(csp_plans)
            if ga_plans:
                all_plans.extend(ga_plans)
                
            if all_plans:
                # Deƒüer skoru: g√ºnl√ºk maliyet d√º≈ü√ºk + toplam g√ºn y√ºksek
                best_value_plan = max(all_plans, key=lambda x: (x['days'] / max_days) - (x['total_cost'] / budget) / 2)
                print(f"Toplam: {best_value_plan['total_cost']:.2f}‚Ç¨, S√ºre: {best_value_plan['days']} g√ºn")
                print(f"G√ºnl√ºk ortalama: {best_value_plan['total_cost'] / best_value_plan['days']:.2f}‚Ç¨")
                for city in best_value_plan['details']:
                    print(f"  ‚Ä¢ {city['city']} ({city['code']}): {city['days']} g√ºn")
                    print(f"    Konaklama: {city['hotel_cost']:.2f}‚Ç¨ ({city['hotel_cost']/city['days']:.2f}‚Ç¨/g√ºn)")
                    print(f"    Yemek: {city['food_cost']:.2f}‚Ç¨, Aktivite: {city['activity_cost']:.2f}‚Ç¨")
            else:
                print("Kriterlere uygun plan bulunamadƒ±")
            
            # Detaylƒ± rapor sunalƒ±m
            print("\nüìä DETAYLI RAPOR G√ñRMEK ƒ∞STER Mƒ∞Sƒ∞Nƒ∞Z? (e/h)")
            detay = input("> ")
            if detay.lower() == 'e':
                print("\n=== DETAYLI SEYAHAT RAPORU ===")
                
                if ga_plans:
                    best_plan = ga_plans[0] # Genetik algoritmanƒ±n en iyi sonucu
                    
                    print("\nüìÜ G√úN G√úN PLAN:")
                    current_day = 1
                    
                    for city in best_plan['details']:
                        city_code = city['code']
                        print(f"\nüèôÔ∏è {city['city']} ({city_code}) - {city['days']} g√ºn")
                        
                        # Show Foursquare recommendations for this city
                        if city_code in city_recommendations and city_recommendations[city_code]:
                            print("  üìç √ñnerilen Yerler:")
                            for place in city_recommendations[city_code][:3]:  # Show top 3 places
                                print(f"    ‚Ä¢ {place}")
                        else:
                            print("  üìç √ñnerilen yerler y√ºklenemedi.")
                        
                        for day in range(city['days']):
                            print(f"\n  G√ºn {current_day}:")
                            if day == 0:
                                print(f"    ‚Ä¢ Sabah: Varƒ±≈ü ve otel giri≈üi")
                                print(f"    ‚Ä¢ √ñƒüleden sonra: ≈ûehir turu")
                                print(f"    ‚Ä¢ Ak≈üam: Yerel restoranda ak≈üam yemeƒüi")
                            else:
                                print(f"    ‚Ä¢ Sabah: ≈ûehir ke≈üfi veya m√ºze ziyareti")
                                print(f"    ‚Ä¢ √ñƒüleden sonra: Yerel aktiviteler")
                                print(f"    ‚Ä¢ Ak≈üam: Gezi ve yemek deneyimi")
                            current_day += 1
                    
                    print(f"\nüí∏ TOPLAM B√úT√áE DAƒûILIMI:")
                    total = best_plan['total_cost']
                    flight_total = sum(city['flight_cost'] for city in best_plan['details'])
                    hotel_total = sum(city['hotel_cost'] for city in best_plan['details'])
                    food_total = sum(city['food_cost'] for city in best_plan['details'])
                    activity_total = sum(city['activity_cost'] for city in best_plan['details'])
                    
                    print(f"  ‚Ä¢ U√ßu≈ülar: {flight_total:.2f}‚Ç¨ ({flight_total/total*100:.1f}%)")
                    print(f"  ‚Ä¢ Konaklama: {hotel_total:.2f}‚Ç¨ ({hotel_total/total*100:.1f}%)")
                    print(f"  ‚Ä¢ Yemek: {food_total:.2f}‚Ç¨ ({food_total/total*100:.1f}%)")
                    print(f"  ‚Ä¢ Aktiviteler: {activity_total:.2f}‚Ç¨ ({activity_total/total*100:.1f}%)")
                    print(f"  ‚Ä¢ TOPLAM: {total:.2f}‚Ç¨ / {budget:.2f}‚Ç¨ (B√ºt√ßenin {total/budget*100:.1f}%'i)")
                else:
                    print("Detaylƒ± rapor i√ßin yeterli veri bulunamadƒ±.")
        else:
            print("Ge√ßersiz se√ßim.")

# Programƒ± √ßalƒ±≈ütƒ±r
if __name__ == "__main__":
    main()
